// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // If instruction is of type A-instruction i.e. instruction[15] = 0, put instruction in first Mux else put alu output in Mux
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=muxAOut);
    
    // Load A register if instruction[15] = 0 or instruction[5] = 1
    Not(in=instruction[15], out=notAInstruction);
    Or(a=instruction[5], b=notAInstruction, out=loadA);
    ARegister(in=muxAOut, load=loadA, out=outA, out[0..14]=addressM);
    
    // Next is Mux 2 which is before ALU. 
    // if instruction[15] = 1 and instruction[12] that is 'a' in C-instruction = 1
    And(a=instruction[15], b=instruction[12], out=mux2Load);
    Mux16(a=outA, b=inM, sel=mux2Load, out=aluY); // ALU 2nd input
    
    // Next is x input of ALU i.e. D register
    // Set D register only when instruction is C-instruction and d2 i.e. instruction[4] is 1
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=aluX); //ALU 1st input
    
    // Next is ALU
    ALU(x=aluX, y=aluY, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],  out=aluOut, out=outM, zr=zr, ng=ng);
    
    // If d3 i.e. instruction[3] = 1 and instruction[15] = 1, set writeM = 1
    And(a=instruction[3], b=instruction[15], out=writeM);
    
    // Next is PC
    // If j1 = 1, instruction[15] = 1 and aluOut < 0, load PC from a A register set previously
    And(a=ng, b=instruction[2], out=pcOut1);
    And(a=pcOut1, b=instruction[15], out=pcOutJ1);    

   // If j2 = 1, instruction[15] = 1 and aluOut=0, load PC from a A register set previously
   And(a=zr, b=instruction[1], out=pcOut2);
   And(a=pcOut2, b=instruction[15], out=pcOutJ2);     
   
   // If j3 = 1, instruction[15] = 1 and aluOut>0, load PC from a A register set previously
   Not(in=ng, out=nonNeg);
   Not(in=zr, out=nonZero);
   And(a=nonNeg, b=nonZero, out=pos);
   And(a=pos, b=instruction[15], out=pcOut3);
   And(a=pcOut3, b=instruction[0], out=pcOutJ3);                

   // Or pcOutJ1, pcOutJ2 and pcOutJ3
   Or(a=pcOutJ1, b=pcOutJ2, out=pc1);
   Or(a=pc1, b=pcOutJ3, out=pc3);
   
   //Next is PC
   PC(in=outA, load=pc3, inc=true, reset=reset, out[0..14]=pc);              
}
